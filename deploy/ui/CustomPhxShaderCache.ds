{
    name	selectedparms

    group {
	name	"folder2"
	label	"CacheExport"

	parm {
	    name	"PhxShaderCache_cache_path"
	    label	"Input Cache File"
	    type	file
	    default	{ "" }
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"cache_load"
	    label	"Do load cache"
	    type	integer
	    invisible
	    default	{ "1" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"icr"
	    label	"Cache Range"
	    type	string
	    invisible
	    default	{ "" }
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"isz"
	    label	"Container Dimensions"
	    type	string
	    invisible
	    default	{ "" }
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"parm18"
	    label	"Cache Output"
	    type	string
	    invisible
	    size	16
	    default	{ "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" }
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "editor" "1" }
	    parmtag	{ "script_callback_language" "python" }
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"anim_mode"
	    label	"Animation Control"
	    type	ordinal
	    default	{ "0" }
	    menu	{
		"0"	"Manual"
		"1"	"Frame Index"
		"2"	"Loop"
	    }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"t2f"
	    label	"Frame Index"
	    type	float
	    default	{ "1" }
	    range	{ 0! 1e+006! }
	    export	none
	}
	parm {
	    name	"loop_overlap"
	    label	"Loop Overlap"
	    type	integer
	    default	{ "0" }
	    range	{ 0! 1e+006! }
	    export	none
	}
	parm {
	    name	"read_offset"
	    label	"Cache Start"
	    type	integer
	    default	{ "1" }
	    range	{ 0! 1e+006! }
	    export	none
	}
	parm {
	    name	"play_at"
	    label	"Play Start"
	    type	integer
	    default	{ "1" }
	    range	{ 0! 1e+006! }
	    export	none
	}
	parm {
	    name	"max_length"
	    label	"Play Length"
	    type	integer
	    default	{ "0" }
	    range	{ 0! 1e+006! }
	    export	none
	}
	parm {
	    name	"play_speed"
	    label	"Play Speed"
	    type	float
	    default	{ "1" }
	    range	{ -10! 10! }
	    export	none
	}
	parm {
	    name	"blend_method"
	    label	"Frame Blending"
	    type	ordinal
	    default	{ "0" }
	    menu	{
		"0"	"Interpolation"
		"1"	"Velocity"
	    }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"load_nearest"
	    label	"Load Nearest Possible"
	    type	toggle
	    default	{ "0" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"flip_yz"
	    label	"Flip Up axis"
	    type	toggle
	    default	{ "0" }
	    range	{ 0 1 }
	    export	none
	}
    }

    group {
	name	"folder3"
	label	"Channel Mapping"

	parm {
	    name	"channel_smoke"
	    label	"Smoke"
	    type	ordinal
	    default	{ "0" }
		menu	{
		    [ "menuItems = ['0', 'None']" ]
		    [ "geom = kwargs['node'].geometry()" ]
		    [ "if geom and geom.findGlobalAttrib('vray_phx_channels'):" ]
		    [ "    channels = geom.attribValue('vray_phx_channels')" ]
		    [ "    if type(channels) is tuple:" ]
		    [ "        # duplicate all channels so we have (key, val) pairs" ]
		    [ "        menuItems.extend([channels[c//2] for c in range(len(channels) * 2)])" ]
		    [ "    else:" ]
		    [ "        menuItems.extend([channels, channels])" ]
		    [ "return menuItems" ]
		    language	python
		}
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"channel_temp"
	    label	"Temperature"
	    type	ordinal
	    default	{ "0" }
		menu	{
		    [ "menuItems = ['0', 'None']" ]
		    [ "geom = kwargs['node'].geometry()" ]
		    [ "if geom and geom.findGlobalAttrib('vray_phx_channels'):" ]
		    [ "    channels = geom.attribValue('vray_phx_channels')" ]
		    [ "    if type(channels) is tuple:" ]
		    [ "        # duplicate all channels so we have (key, val) pairs" ]
		    [ "        menuItems.extend([channels[c//2] for c in range(len(channels) * 2)])" ]
		    [ "    else:" ]
		    [ "        menuItems.extend([channels, channels])" ]
		    [ "return menuItems" ]
		    language	python
		}
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"channel_fuel"
	    label	"Fuel"
	    type	ordinal
	    default	{ "0" }
		menu	{
		    [ "menuItems = ['0', 'None']" ]
		    [ "geom = kwargs['node'].geometry()" ]
		    [ "if geom and geom.findGlobalAttrib('vray_phx_channels'):" ]
		    [ "    channels = geom.attribValue('vray_phx_channels')" ]
		    [ "    if type(channels) is tuple:" ]
		    [ "        # duplicate all channels so we have (key, val) pairs" ]
		    [ "        menuItems.extend([channels[c//2] for c in range(len(channels) * 2)])" ]
		    [ "    else:" ]
		    [ "        menuItems.extend([channels, channels])" ]
		    [ "return menuItems" ]
		    language	python
		}
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"channel_vel_x"
	    label	"Velocity.x"
	    type	ordinal
	    default	{ "0" }
		menu	{
		    [ "menuItems = ['0', 'None']" ]
		    [ "geom = kwargs['node'].geometry()" ]
		    [ "if geom and geom.findGlobalAttrib('vray_phx_channels'):" ]
		    [ "    channels = geom.attribValue('vray_phx_channels')" ]
		    [ "    if type(channels) is tuple:" ]
		    [ "        # duplicate all channels so we have (key, val) pairs" ]
		    [ "        menuItems.extend([channels[c//2] for c in range(len(channels) * 2)])" ]
		    [ "    else:" ]
		    [ "        menuItems.extend([channels, channels])" ]
		    [ "return menuItems" ]
		    language	python
		}
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"channel_vel_y"
	    label	"Velocity.y"
	    type	ordinal
	    default	{ "0" }
		menu	{
		    [ "menuItems = ['0', 'None']" ]
		    [ "geom = kwargs['node'].geometry()" ]
		    [ "if geom and geom.findGlobalAttrib('vray_phx_channels'):" ]
		    [ "    channels = geom.attribValue('vray_phx_channels')" ]
		    [ "    if type(channels) is tuple:" ]
		    [ "        # duplicate all channels so we have (key, val) pairs" ]
		    [ "        menuItems.extend([channels[c//2] for c in range(len(channels) * 2)])" ]
		    [ "    else:" ]
		    [ "        menuItems.extend([channels, channels])" ]
		    [ "return menuItems" ]
		    language	python
		}
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"channel_vel_z"
	    label	"Velocity.z"
	    type	ordinal
	    default	{ "0" }
		menu	{
		    [ "menuItems = ['0', 'None']" ]
		    [ "geom = kwargs['node'].geometry()" ]
		    [ "if geom and geom.findGlobalAttrib('vray_phx_channels'):" ]
		    [ "    channels = geom.attribValue('vray_phx_channels')" ]
		    [ "    if type(channels) is tuple:" ]
		    [ "        # duplicate all channels so we have (key, val) pairs" ]
		    [ "        menuItems.extend([channels[c//2] for c in range(len(channels) * 2)])" ]
		    [ "    else:" ]
		    [ "        menuItems.extend([channels, channels])" ]
		    [ "return menuItems" ]
		    language	python
		}
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"channel_red"
	    label	"Red"
	    type	ordinal
	    default	{ "0" }
		menu	{
		    [ "menuItems = ['0', 'None']" ]
		    [ "geom = kwargs['node'].geometry()" ]
		    [ "if geom and geom.findGlobalAttrib('vray_phx_channels'):" ]
		    [ "    channels = geom.attribValue('vray_phx_channels')" ]
		    [ "    if type(channels) is tuple:" ]
		    [ "        # duplicate all channels so we have (key, val) pairs" ]
		    [ "        menuItems.extend([channels[c//2] for c in range(len(channels) * 2)])" ]
		    [ "    else:" ]
		    [ "        menuItems.extend([channels, channels])" ]
		    [ "return menuItems" ]
		    language	python
		}
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"channel_green"
	    label	"Green"
	    type	ordinal
	    default	{ "0" }
		menu	{
		    [ "menuItems = ['0', 'None']" ]
		    [ "geom = kwargs['node'].geometry()" ]
		    [ "if geom and geom.findGlobalAttrib('vray_phx_channels'):" ]
		    [ "    channels = geom.attribValue('vray_phx_channels')" ]
		    [ "    if type(channels) is tuple:" ]
		    [ "        # duplicate all channels so we have (key, val) pairs" ]
		    [ "        menuItems.extend([channels[c//2] for c in range(len(channels) * 2)])" ]
		    [ "    else:" ]
		    [ "        menuItems.extend([channels, channels])" ]
		    [ "return menuItems" ]
		    language	python
		}
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"channel_blue"
	    label	"Blue"
	    type	ordinal
	    default	{ "0" }
		menu	{
		    [ "menuItems = ['0', 'None']" ]
		    [ "geom = kwargs['node'].geometry()" ]
		    [ "if geom and geom.findGlobalAttrib('vray_phx_channels'):" ]
		    [ "    channels = geom.attribValue('vray_phx_channels')" ]
		    [ "    if type(channels) is tuple:" ]
		    [ "        # duplicate all channels so we have (key, val) pairs" ]
		    [ "        menuItems.extend([channels[c//2] for c in range(len(channels) * 2)])" ]
		    [ "    else:" ]
		    [ "        menuItems.extend([channels, channels])" ]
		    [ "return menuItems" ]
		    language	python
		}
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
    }

    group {
	name	"folder4"
	label	"Rendering"

	parm {
	    name	"render"
	    label	"Enable Rendering"
	    type	toggle
	    default	{ "1" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"jitter"
	    label	"Enable Jittering"
	    type	toggle
	    invisible
	    default	{ "1" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"renderMode"
	    label	"Render Mode"
	    type	ordinal
	    default	{ "0" }
	    menu	{
		"0"	"Volumetric"
		"1"	"Volumetric Geometry"
		"2"	"Volumetric Heat Haze"
		"3"	"Isosurface"
		"4"	"Mesh"
	    }
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"pmprimary"
	    label	"Probabilistic Rendering"
	    type	ordinal
	    default	{ "0" }
	    menu	{
		"0"	"Disable"
		"1"	"RT Only"
		"2"	"Always"
	    }
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"rendstep"
	    label	"Step (%)"
	    type	integer
	    default	{ "80" }
	    range	{ 1! 10000! }
	    export	none
	    parmtag	{ "autoscope" "0000000000000000" }
	}
	parm {
	    name	"rendshadstep"
	    label	"Shadow Step (%)"
	    type	integer
	    default	{ "200" }
	    range	{ 1! 10000! }
	    export	none
	}
	parm {
	    name	"softb"
	    label	"Fade Out"
	    type	float
	    default	{ "0" }
	    range	{ 0! 100000! }
	    export	none
	}
	parm {
	    name	"velocity_mult"
	    label	"Motion Blur Multiplier"
	    type	float
	    default	{ "1" }
	    range	{ 0! 1000! }
	    export	none
	}
	parm {
	    name	"vtex"
	    label	"Velocity Texture"
	    type	uv
	    size	2
	    default	{ "0" "0" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"sampler"
	    label	"Sampler Type"
	    type	ordinal
	    default	{ "1" }
	    menu	{
		"0"	"Trunk"
		"1"	"Linear"
		"2"	"Spherical"
	    }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"coord_method"
	    label	"Coordinate Method"
	    type	ordinal
	    default	{ "0" }
	    menu	{
		"0"	"Fixed"
		"1"	"Grid"
	    }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"sarg"
	    label	"Surface Channel"
	    type	ordinal
	    default	{ "1" }
	    menu	{
		"0"	"Texture"
		"1"	"Temperature"
		"2"	"Smoke"
		"3"	"Speed"
		"4"	"Fuel"
	    }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"stex"
	    label	"Surface Texture"
	    type	uv
	    size	2
	    default	{ "0" "0" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"surflevel"
	    label	"Surface Level"
	    type	float
	    default	{ "0.01" }
	    range	{ -100000! 100000! }
	    export	none
	}
	parm {
	    name	"solidbelow"
	    label	"Invert Volume"
	    type	toggle
	    default	{ "0" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"dynamic_geometry"
	    label	"Mesh Type"
	    type	ordinal
	    default	{ "0" }
	    menu	{
		"0"	"Static Mesh"
		"1"	"Dynamic Mesh"
	    }
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"smoothmesh"
	    label	"Mesh Smoothing"
	    type	integer
	    default	{ "5" }
	    range	{ 0! 1000! }
	    export	none
	}
	parm {
	    name	"normalized_positions"
	    label	"normalized_positions"
	    type	toggle
	    invisible
	    default	{ "1" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"hhfactor"
	    label	"Heat Size"
	    type	float
	    default	{ "1" }
	    range	{ -1000! 1000! }
	    export	none
	}
	parm {
	    name	"displacement"
	    label	"Enable Displacement"
	    type	toggle
	    default	{ "0" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"displ2d"
	    label	"Type"
	    type	ordinal
	    default	{ "1." }
	    disablewhen	"{ displacement == 0 }"
	    menu	{
		"0"	"Gradient Driven"
		"1"	"Surface Driven"
		"2"	"Vector"
	    }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"displmul"
	    label	"Displacement Amount"
	    type	float
	    default	{ "1" }
	    disablewhen	"{ displacement == 0 }"
	    range	{ 0! 1000! }
	    export	none
	}
	parm {
	    name	"displ2"
	    label	"Texture"
	    type	uv
	    size	2
	    default	{ "0" "0" }
	    disablewhen	"{ displacement == 0 }"
	    range	{ 0 1 }
	    export	none
	}
    }

    group {
	name	"folder5"
	label	"Fire"

	parm {
	    name	"earg"
	    label	"Base On"
	    type	ordinal
	    default	{ "1" }
	    menu	{
		"0"	"Disabled"
		"1"	"Temperature"
		"2"	"Smoke"
		"3"	"Speed"
		"4"	"Fuel"
		"5"	"Texture"
		"6"	"RGB"
	    }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"etex"
	    label	"Texture"
	    type	uv
	    size	2
	    default	{ "0" "0" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"mod_e"
	    label	"Modulate by Texture"
	    type	toggle
	    default	{ "0" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"fire_opacity_mode"
	    label	"Opacity Mode"
	    type	ordinal
	    default	{ "0" }
	    menu	{
	    "0"	"Use Smoke Opacity"
		"1"	"Fully Visible"
		"2"	"Use Own Opacity"
	    }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"etmult"
	    label	"Opacity Multiplier"
	    type	float
	    default	{ "1" }
	    range	{ 0! 100! }
	    export	none
	}
	parm {
	    name	"sepparm2"
	    label	"Separator"
	    type	separator
	    default	{ "" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"ecolor_offset"
	    label	"Input Offset"
	    type	float
	    default	{ "0" }
	    range	{ 0! 100000! }
	    export	none
	}
	parm {
	    name	"ecolor_scale"
	    label	"Input Scale"
	    type	float
	    default	{ "1" }
	    range	{ 0! 100000! }
	    export	none
	}
	parm {
	    name	"emult"
	    label	"Luminance Scale"
	    type	float
	    default	{ "300000" }
	    range	{ 0! 1e+012! }
	    export	none
	}
	parm {
	    name	"elum_curve"
	    label	"Fire Luminance"
	    type	ramp_flt
	    default	{ "2" }
	    range	{ 1! 10 }
	    export	none
	    parmtag	{ "rampbasis_var" "elum_interpolations" }
	    parmtag	{ "rampkeys_var" "elum_positions" }
	    parmtag	{ "rampvalues_var" "elum_values" }
	}
	parm {
	    name	"ecolor_ramp"
	    label	"Fire Color"
	    type	ramp_rgb
	    default	{ "2" }
	    range	{ 1! 10 }
	    export	none
	    parmtag	{ "rampbasis_var" "ecolor_interpolations" }
	    parmtag	{ "rampkeys_var" "ecolor_positions" }
	    parmtag	{ "rampvalues_var" "ecolor_colors" }
	}
    }

    group {
	name	"folder6"
	label	"Lights"

	parm {
	    name	"al_enable"
	    label	"Enable Lighting"
	    type	toggle
	    default	{ "1" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"lights"
	    label	"Lights count"
	    type	integer
	    invisible
	    default	{ "200" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"lightsmult"
	    label	"Light Power on Scene"
	    type	float
	    default	{ "1" }
	    range	{ 0! 1000! }
	    export	none
	}
	parm {
	    name	"lightsmultself"
	    label	"Light Power on Self"
	    type	float
	    default	{ "1" }
	    range	{ 0! 1000! }
	    export	none
	}
	parm {
	    name	"selfshadow"
	    label	"Self-Shadowing"
	    type	ordinal
	    default	{ "2" }
	    menu	{
		"0"	"None"
		"1"	"Ray-traced"
		"2"	"Grid-based"
	    }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"gridreduct"
	    label	"Light Grid Resolution (%)"
	    type	float
	    default	{ "5" }
	    range	{ 0! 100! }
	    export	none
	}
	parm {
	    name	"al_sampling"
	    label	"Lights Sampling"
	    type	ordinal
	    invisible
	    default	{ "1" }
	    menu	{
		"0"	"Simple"
		"1"	"DMC"
	    }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"al_placing"
	    label	"Lights Placing"
	    type	integer
	    invisible
	    default	{ "2" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"al_decay"
	    label	"Decay Type"
	    type	ordinal
	    default	{ "2" }
	    menu	{
		"0"	"None"
		"1"	"Inverse"
		"2"	"Inverse Square"
	    }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"al_subdivs"
	    label	"Subdivs"
	    type	integer
	    default	{ "8" }
	    range	{ 0 512! }
	    export	none
	}
    }

    group {
	name	"folder7"
	label	"Smoke Color"

	parm {
	    name	"darg"
	    label	"Diffuse Input"
	    type	ordinal
	    default	{ "1" }
	    menu	{
		"0"	"Disabled"
		"1"	"Temperature"
		"2"	"Smoke"
		"3"	"Speed"
		"10"	"Fuel"
		"4"	"Texture"
		"5"	"SimpleColor"
		"6"	"RGB"
	    }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"dtex"
	    label	"Texture"
	    type	uv
	    size	2
	    default	{ "0" "0" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"mod_d"
	    label	"Modulate by Texture"
	    type	toggle
	    default	{ "0" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"simple_color"
	    label	"Constant Color"
	    type	color
	    size	3
	    default	{ "0.2" "0.2" "0.2" }
	    disablewhen	"{ darg != 5 }"
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"lightcache"
	    label	"Light Cache"
	    type	toggle
	    default	{ "1" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"lightcachesr"
	    label	"Light Cache Speedup"
	    type	float
	    default	{ "0.9" }
	    disablewhen	"{ lightcache != 1 }"
	    range	{ 0! 0.999! }
	    export	none
	}
	parm {
	    name	"noscatter"
	    label	"Scattering"
	    type	ordinal
	    default	{ "2" }
	    menu	{
		"0"	"Realistic (GI Only)"
		"1"	"Disabled"
		"2"	"Approximate"
		"3"	"Approximate+Shadows"
	    }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"bounces"
	    label	"Scatter Depth"
	    type	integer
	    default	{ "10" }
	    disablewhen "{ noscatter != 0 }"
	    range	{ 0! 65535! }
	    export	none
	}
	parm {
	    name	"difmul"
	    label	"Diffuse Multiplier"
	    type	float
	    default	{ "1" }
	    range	{ 0! 4! }
	    export	none
	}
	parm {
	    name	"transfown"
	    label	"Own Light Scatter Mult"
	    type	float
	    default	{ "1" }
	    range	{ 0! 10! }
	    export	none
	}
	parm {
	    name	"transfext"
	    label	"External Scatter Mult"
	    type	float
	    default	{ "1" }
	    range	{ 0! 10! }
	    export	none
	}
	parm {
	    name	"shad_strength"
	    label	"Shadow Strength"
	    type	float
	    default	{ "1" }
	    range	{ 0! 100! }
	    export	none
	}
	parm {
	    name	"sepparm"
	    label	"Separator"
	    type	separator
	    default	{ "" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"dcolor_offset"
	    label	"Input Offset"
	    type	float
	    default	{ "0" }
	    range	{ 0! 100000! }
	    export	none
	}
	parm {
	    name	"dcolor_scale"
	    label	"Input Scale"
	    type	float
	    default	{ "1" }
	    range	{ 0! 100000! }
	    export	none
	}
	parm {
	    name	"dcolor_ramp"
	    label	"Color Gradient"
	    type	ramp_rgb
	    default	{ "2" }
	    range	{ 1! 10 }
	    export	none
	    parmtag	{ "rampbasis_var" "dcolor_interpolations" }
	    parmtag	{ "rampkeys_var" "dcolor_positions" }
	    parmtag	{ "rampvalues_var" "dcolor_colors" }
	}
    }

    group {
	name	"folder8"
	label	"Smoke Opacity"

	parm {
	    name	"targ"
	    label	"Opacity Input"
	    type	ordinal
	    default	{ "0" }
	    menu	{
		"0"	"Simple Smoke"
		"1"	"Temperature"
		"2"	"Smoke"
		"3"	"Speed"
		"10"	"Fuel"
		"4"	"Texture"
	    }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"ttex"
	    label	"Texture"
	    type	uv
	    size	2
	    default	{ "0" "0" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"mod_t"
	    label	"Modulate by Texture"
	    type	toggle
	    default	{ "0" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"smoketransp"
	    label	"Simple Smoke Factor"
	    type	float
	    default	{ "0" }
	    range	{ 0! 1! }
	    export	none
	}
	parm {
	    name	"stoptransp"
	    label	"Simple Smoke Stop Transparancy"
	    type	float
	    invisible
	    default	{ "0.999" }
	    range	{ 0! 1! }
	    export	none
	}
	parm {
	    name	"skiptransp"
	    label	"Simple Smoke Start Transparancy"
	    type	float
	    invisible
	    default	{ "0.001" }
	    range	{ 0! 1! }
	    export	none
	}
	parm {
	    name	"transpmode"
	    label	"transpmode"
	    type	integer
	    invisible
	    default	{ "1" }
	    range	{ 0! 1! }
	    export	none
	}
	parm {
	    name	"sepparm1"
	    label	"Separator"
	    type	separator
	    default	{ "" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"transp_offset"
	    label	"Input Offset"
	    type	float
	    default	{ "0" }
	    range	{ 0! 100000! }
	    export	none
	}
	parm {
	    name	"transp_scale"
	    label	"Input Scale"
	    type	float
	    default	{ "1" }
	    range	{ 0! 100000! }
	    export	none
	}
	parm {
	    name	"tmult"
	    label	"Opacity Scale"
	    type	float
	    default	{ "1" }
	    range	{ 0! 1e+012! }
	    export	none
	}
	parm {
	    name	"transp_curve"
	    label	"Opacity"
	    type	ramp_flt
	    default	{ "2" }
	    range	{ 1! 10 }
	    export	none
	    parmtag	{ "rampbasis_var" "transp_interpolations" }
	    parmtag	{ "rampkeys_var" "transp_positions" }
	    parmtag	{ "rampvalues_var" "transp_values" }
	}
    }


}