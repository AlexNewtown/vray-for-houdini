{
    name	parameters
    parm {
	name	"plugindata"
	label	"Two Sided"
	type	data
	invisible
	default	{ "0" }
	help	"Mtl2Sided settings"
	range	{ 0 1 }
	export	none
	parmtag	{ "vray_plugin" "Mtl2Sided" }
	parmtag	{ "vray_type" "MATERIAL" }
    }
    group {
	name	"folder"
	label	"Parameters"

	parm {
	    name	"front"
	    label	"Front"
	    type	oppath
	    default	{ "" }
	    help	"The material for the surface on the same side as the normal"
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "cook_dependent" "1" }
	    parmtag	{ "oprelative" "." }
	    parmtag	{ "vray_plugin" "Mtl2Sided" }
	    parmtag	{ "vray_pluginattr" "front" }
	    parmtag	{ "vray_type" "Object" }
	}
	parm {
	    name	"back"
	    label	"Back"
	    type	oppath
	    default	{ "" }
	    help	"The material for the side that is opposite the surface normal"
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "cook_dependent" "1" }
	    parmtag	{ "oprelative" "." }
	    parmtag	{ "vray_plugin" "Mtl2Sided" }
	    parmtag	{ "vray_pluginattr" "back" }
	    parmtag	{ "vray_type" "Object" }
	}
	parm {
	    name	"translucency_tex"
	    label	"Translucency Texture"
	    type	color4
	    size	4
	    default	{ "0.5" "0.5" "0.5" "1" }
	    help	"Translucency texture"
	    range	{ 0 10 }
	    export	none
	    parmtag	{ "cook_dependent" "1" }
	    parmtag	{ "vray_plugin" "Mtl2Sided" }
	    parmtag	{ "vray_pluginattr" "translucency_tex" }
	    parmtag	{ "vray_type" "Texture" }
	}
	parm {
	    name	"force_1sided"
	    label	"Force Single-sided Sub-materials"
	    type	toggle
	    default	{ "1" }
	    help	"True to make the sub-materials one-sided"
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "cook_dependent" "1" }
	    parmtag	{ "vray_plugin" "Mtl2Sided" }
	    parmtag	{ "vray_pluginattr" "force_1sided" }
	    parmtag	{ "vray_type" "boolean" }
	}
	parm {
	    name	"use"
	    label	"Use"
	    type	toggle
	    default	{ "0" }
	    help	"Use Two Sided material"
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "cook_dependent" "1" }
	    parmtag	{ "vray_custom_handling" "1" }
	}
	parm {
	    name	"translucency"
	    label	"Translucency"
	    type	color
	    size	3
	    default	{ "0" "0" "0" }
	    help	"Translucency between front and back"
	    range	{ 0 10 }
	    export	none
	    parmtag	{ "cook_dependent" "1" }
	    parmtag	{ "vray_plugin" "Mtl2Sided" }
	    parmtag	{ "vray_pluginattr" "translucency" }
	    parmtag	{ "vray_type" "Color" }
	}
	parm {
	    name	"translucency_tex_mult"
	    label	"Translucency Texture Multiplier"
	    type	float
	    default	{ "1" }
	    help	"Multiplier for the translucency texture"
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "cook_dependent" "1" }
	    parmtag	{ "vray_plugin" "Mtl2Sided" }
	    parmtag	{ "vray_pluginattr" "translucency_tex_mult" }
	    parmtag	{ "vray_type" "float" }
	}
	parm {
	    name	"mult_by_front_diffuse"
	    label	"Multiply By Front Diffuse"
	    type	toggle
	    default	{ "0" }
	    help	"True to multiply the back side color by the cached diffuse color of the front BRDF"
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "cook_dependent" "1" }
	    parmtag	{ "vray_plugin" "Mtl2Sided" }
	    parmtag	{ "vray_pluginattr" "mult_by_front_diffuse" }
	    parmtag	{ "vray_type" "boolean" }
	}
	parm {
	    name	"channels"
	    label	"Channels"
	    type	oplist
	    default	{ "" }
	    help	"Render channels the result of this BRDF will be written to"
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "cook_dependent" "1" }
	    parmtag	{ "oprelative" "." }
	    parmtag	{ "vray_plugin" "Mtl2Sided" }
	    parmtag	{ "vray_pluginattr" "channels" }
	    parmtag	{ "vray_type" "List<Object>" }
	}
    }

}
