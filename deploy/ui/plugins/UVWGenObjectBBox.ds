{
    name	parameters
    group {
	name	"UVWGenObjectBBox"
	label	"Bounding Box"

	parm {
	    name	"plugindata"
	    label	"Bounding Box"
	    type	data
	    invisible
	    default	{ "0" }
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_plugin" "UVWGenObjectBBox" }
	    parmtag	{ "vray_type" "UVWGEN" }
	}
	groupsimple {
	    name	"uvw_transform"
	    label	"Uvw Transform"
	    grouptag	{ "vray_plugin" "UVWGenObjectBBox" }
	    grouptag	{ "vray_pluginattr" "uvw_transform" }
	    grouptag	{ "vray_type" "Transform" }

	    parm {
		name	"uvw_transform_xOrd"
		label	"Transform Order"
		type	ordinal
		default	{ "0" }
		menu	{
		    "srt"	"Scale Rotate Translate"
		    "str"	"Scale Translate Rotate"
		    "rst"	"Rotate Scale Translate"
		    "rts"	"Rotate Translate Scale"
		    "tsr"	"Translate Scale Rotate"
		    "trs"	"Translate Rotate Scale"
		}
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"uvw_transform_rOrd"
		label	"Rotation Order"
		type	ordinal
		default	{ "0" }
		menu	{
		    "xyz"	"Rx Ry Rz"
		    "xzy"	"Rx Rz Ry"
		    "yxz"	"Ry Rx Rz"
		    "yzx"	"Ry Rz Rx"
		    "zxy"	"Rz Rx Ry"
		    "zyx"	"Rz Ry Rx"
		}
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"uvw_transform_trans"
		label	"Translate"
		type	float
		size	3
		default	{ "0" "0" "0" }
		help	"Initial transformation on the uvw coordinates, before mirror, crop etc"
		range	{ 0 10 }
		export	none
	    }
	    parm {
		name	"uvw_transform_rot"
		label	"Rotate"
		type	angle
		size	3
		default	{ "0" "0" "0" }
		help	"Initial transformation on the uvw coordinates, before mirror, crop etc"
		range	{ 0 10 }
		export	none
	    }
	    parm {
		name	"uvw_transform_scale"
		label	"Scale"
		type	float
		size	3
		default	{ "1" "1" "1" }
		help	"Initial transformation on the uvw coordinates, before mirror, crop etc"
		range	{ 0 10 }
		export	none
	    }
	    parm {
		name	"uvw_transform_pivot"
		label	"Pivot"
		type	float
		size	3
		default	{ "0" "0" "0" }
		help	"Initial transformation on the uvw coordinates, before mirror, crop etc"
		range	{ 0 10 }
		export	none
	    }
	}

	groupsimple {
	    name	"uvw_transform_tex"
	    label	"Uvw Transform Tex"
	    grouptag	{ "vray_plugin" "UVWGenObjectBBox" }
	    grouptag	{ "vray_pluginattr" "uvw_transform_tex" }
	    grouptag	{ "vray_type" "TextureTransform" }

	    parm {
		name	"uvw_transform_tex_xOrd"
		label	"Transform Order"
		type	ordinal
		default	{ "0" }
		menu	{
		    "srt"	"Scale Rotate Translate"
		    "str"	"Scale Translate Rotate"
		    "rst"	"Rotate Scale Translate"
		    "rts"	"Rotate Translate Scale"
		    "tsr"	"Translate Scale Rotate"
		    "trs"	"Translate Rotate Scale"
		}
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"uvw_transform_tex_rOrd"
		label	"Rotation Order"
		type	ordinal
		default	{ "0" }
		menu	{
		    "xyz"	"Rx Ry Rz"
		    "xzy"	"Rx Rz Ry"
		    "yxz"	"Ry Rx Rz"
		    "yzx"	"Ry Rz Rx"
		    "zxy"	"Rz Rx Ry"
		    "zyx"	"Rz Ry Rx"
		}
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"uvw_transform_tex_trans"
		label	"Translate"
		type	float
		size	3
		default	{ "0" "0" "0" }
		range	{ 0 10 }
		export	none
	    }
	    parm {
		name	"uvw_transform_tex_rot"
		label	"Rotate"
		type	angle
		size	3
		default	{ "0" "0" "0" }
		range	{ 0 10 }
		export	none
	    }
	    parm {
		name	"uvw_transform_tex_scale"
		label	"Scale"
		type	float
		size	3
		default	{ "1" "1" "1" }
		range	{ 0 10 }
		export	none
	    }
	    parm {
		name	"uvw_transform_tex_pivot"
		label	"Pivot"
		type	float
		size	3
		default	{ "0" "0" "0" }
		range	{ 0 10 }
		export	none
	    }
	}

	groupsimple {
	    name	"tex_transform"
	    label	"Tex Transform"
	    grouptag	{ "vray_plugin" "UVWGenObjectBBox" }
	    grouptag	{ "vray_pluginattr" "tex_transform" }
	    grouptag	{ "vray_type" "Transform" }

	    parm {
		name	"tex_transform_xOrd"
		label	"Transform Order"
		type	ordinal
		default	{ "0" }
		menu	{
		    "srt"	"Scale Rotate Translate"
		    "str"	"Scale Translate Rotate"
		    "rst"	"Rotate Scale Translate"
		    "rts"	"Rotate Translate Scale"
		    "tsr"	"Translate Scale Rotate"
		    "trs"	"Translate Rotate Scale"
		}
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"tex_transform_rOrd"
		label	"Rotation Order"
		type	ordinal
		default	{ "0" }
		menu	{
		    "xyz"	"Rx Ry Rz"
		    "xzy"	"Rx Rz Ry"
		    "yxz"	"Ry Rx Rz"
		    "yzx"	"Ry Rz Rx"
		    "zxy"	"Rz Rx Ry"
		    "zyx"	"Rz Ry Rx"
		}
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"tex_transform_trans"
		label	"Translate"
		type	float
		size	3
		default	{ "0" "0" "0" }
		help	"Final transformation on the resulting uvw coordinates, after mirror, crop etc"
		range	{ 0 10 }
		export	none
	    }
	    parm {
		name	"tex_transform_rot"
		label	"Rotate"
		type	angle
		size	3
		default	{ "0" "0" "0" }
		help	"Final transformation on the resulting uvw coordinates, after mirror, crop etc"
		range	{ 0 10 }
		export	none
	    }
	    parm {
		name	"tex_transform_scale"
		label	"Scale"
		type	float
		size	3
		default	{ "1" "1" "1" }
		help	"Final transformation on the resulting uvw coordinates, after mirror, crop etc"
		range	{ 0 10 }
		export	none
	    }
	    parm {
		name	"tex_transform_pivot"
		label	"Pivot"
		type	float
		size	3
		default	{ "0" "0" "0" }
		help	"Final transformation on the resulting uvw coordinates, after mirror, crop etc"
		range	{ 0 10 }
		export	none
	    }
	}

	parm {
	    name	"nsamples"
	    label	"Nsamples"
	    type	integer
	    default	{ "0" }
	    help	"Number of uvw transform samples"
	    range	{ 0 64 }
	    export	none
	    parmtag	{ "vray_plugin" "UVWGenObjectBBox" }
	    parmtag	{ "vray_pluginattr" "nsamples" }
	    parmtag	{ "vray_type" "int" }
	}
	parm {
	    name	"wrap_u"
	    label	"Wrap U"
	    type	integer
	    default	{ "0" }
	    help	"0 - no wrapping, 1 - wrap, 2 - mirror tile"
	    range	{ 0 64 }
	    export	none
	    parmtag	{ "vray_plugin" "UVWGenObjectBBox" }
	    parmtag	{ "vray_pluginattr" "wrap_u" }
	    parmtag	{ "vray_type" "int" }
	}
	parm {
	    name	"wrap_v"
	    label	"Wrap V"
	    type	integer
	    default	{ "0" }
	    help	"0 - no wrapping, 1 - wrap, 2 - mirror tile"
	    range	{ 0 64 }
	    export	none
	    parmtag	{ "vray_plugin" "UVWGenObjectBBox" }
	    parmtag	{ "vray_pluginattr" "wrap_v" }
	    parmtag	{ "vray_type" "int" }
	}
	parm {
	    name	"wrap_w"
	    label	"Wrap W"
	    type	integer
	    default	{ "0" }
	    help	"0 - no wrapping, 1 - wrap, 2 - mirror tile"
	    range	{ 0 64 }
	    export	none
	    parmtag	{ "vray_plugin" "UVWGenObjectBBox" }
	    parmtag	{ "vray_pluginattr" "wrap_w" }
	    parmtag	{ "vray_type" "int" }
	}
	parm {
	    name	"crop_u"
	    label	"Crop U"
	    type	integer
	    default	{ "0" }
	    help	"1 to crop in the u-direction"
	    range	{ 0 64 }
	    export	none
	    parmtag	{ "vray_plugin" "UVWGenObjectBBox" }
	    parmtag	{ "vray_pluginattr" "crop_u" }
	    parmtag	{ "vray_type" "int" }
	}
	parm {
	    name	"crop_v"
	    label	"Crop V"
	    type	integer
	    default	{ "0" }
	    help	"1 to crop in the v-direction"
	    range	{ 0 64 }
	    export	none
	    parmtag	{ "vray_plugin" "UVWGenObjectBBox" }
	    parmtag	{ "vray_pluginattr" "crop_v" }
	    parmtag	{ "vray_type" "int" }
	}
	parm {
	    name	"crop_w"
	    label	"Crop W"
	    type	integer
	    default	{ "0" }
	    help	"1 to crop in the w-direction"
	    range	{ 0 64 }
	    export	none
	    parmtag	{ "vray_plugin" "UVWGenObjectBBox" }
	    parmtag	{ "vray_pluginattr" "crop_w" }
	    parmtag	{ "vray_type" "int" }
	}
	parm {
	    name	"coverage"
	    label	"Coverage"
	    type	direction
	    size	3
	    default	{ "1" "1" "1" }
	    help	"Coverage"
	    range	{ 0 10 }
	    export	none
	    parmtag	{ "vray_plugin" "UVWGenObjectBBox" }
	    parmtag	{ "vray_pluginattr" "coverage" }
	    parmtag	{ "vray_type" "Vector" }
	}
	parm {
	    name	"wrap_mode"
	    label	"Wrap Mode"
	    type	integer
	    default	{ "0" }
	    help	"Wrap mode (0 - wrap on 0.5 boundary; 1 - wrap on integer boundary"
	    menu	{
		"0"	"On 0.5 boundary"
		"1"	"On integer boundary"
	    }
	    range	{ 0 64 }
	    export	none
	    parmtag	{ "vray_plugin" "UVWGenObjectBBox" }
	    parmtag	{ "vray_pluginattr" "wrap_mode" }
	    parmtag	{ "vray_type" "int" }
	}
	parm {
	    name	"duvw_scale"
	    label	"Duvw Scale"
	    type	float
	    default	{ "1" }
	    help	"Additional scale factor for the texture derivatives"
	    range	{ 0 64 }
	    export	none
	    parmtag	{ "vray_plugin" "UVWGenObjectBBox" }
	    parmtag	{ "vray_pluginattr" "duvw_scale" }
	    parmtag	{ "vray_type" "float" }
	}
    }

}
