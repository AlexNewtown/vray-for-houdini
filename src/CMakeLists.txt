#
# Copyright (c) 2015, Chaos Software Ltd
#
# V-Ray For Houdini
#
# Andrei Izrantcev <andrei.izrantcev@chaosgroup.com>
#
# All rights reserved. These coded instructions, statements and
# computer programs contain unpublished information proprietary to
# Chaos Group Ltd, which is protected by the appropriate copyright
# laws and may not be disclosed to third parties or copied or
# duplicated, in whole or in part, without prior written consent of
# Chaos Group Ltd.
#

# Made using: cat sesitag.txt | sesitag -m
set(PLUGIN_TAGINFO "\"3262197cbf104d152da5089a671b9ff8394bdcd9d530d8aa27f5984e1714bfd251aa2487851869344346dba5159b681c2da1a710878dac641a5874f82bead6fb0cb006e8bedd1ad3f169d85849f95eb181\"")

include(CheckIncludeFile)

include(vfh_compiler)
include(vfh_macro)
include(vfh_houdini)
include(vfh_vrayappsdk)
include(vfh_vraysdk)

add_definitions(-DVRAY_FOR_HOUDINI)

include_directories(.)
include_directories(ui)
include_directories(op)
include_directories(sop)
include_directories(vop)
include_directories(vop/brdf)
include_directories(vop/material)
include_directories(vop/texture)
include_directories(vop/uvwgen)
include_directories(vop/meta)
include_directories(export)
include_directories(export/utils)
include_directories(utils)

file(GLOB_RECURSE SOURCES "*.cpp")
file(GLOB_RECURSE HEADERS "*.h")

# *.aur preview
CHECK_INCLUDE_FILE(FluidInterface.h HAS_PHOENIX)
if (HAS_PHOENIX)
	add_definitions(-DCGR_HAS_AUR)
endif()

# *.vrscene preview
CHECK_INCLUDE_FILE(vrayscene_preview_mesh.h HAS_VRSCENE)
if (HAS_VRSCENE)
	add_definitions(-DCGR_HAS_VRAYSCENE)
endif()

use_houdini_sdk()
use_vray_sdk()
use_vray_appsdk()

houdini_plugin(${PROJECT_NAME} "${SOURCES};${HEADERS}")

link_with_vray_sdk(${PROJECT_NAME})
link_with_vray_appsdk(${PROJECT_NAME})
link_with_boost(${PROJECT_NAME})

# Install shelf and icon locally
#
file(GLOB VFH_PY_SCRIPTS ${CMAKE_SOURCE_DIR}/deploy/scripts/*.py)

install(FILES       ${CMAKE_SOURCE_DIR}/deploy/vfh.shelf
		DESTINATION ${HOUDINI_HOME_PATH}/toolbar)

install(FILES       ${CMAKE_SOURCE_DIR}/deploy/ROP_vray.svg
		DESTINATION ${HOUDINI_HOME_PATH}/config/Icons)

install(FILES       ${VFH_PY_SCRIPTS}
		DESTINATION ${HOUDINI_HOME_PATH}/scripts/vfh)

# Create program launcher with all needed environment variables
#
option(USE_LAUNCHER "Create launcher" ON)
if(USE_LAUNCHER)
	if(WIN32)
		set(HFS_RUN_FILE "$ENV{USERPROFILE}/Desktop/hfs.bat")

		message(STATUS "Generating Houdini run file (${HFS_RUN_FILE})")

		file(WRITE ${HFS_RUN_FILE}
			":: NOTE: This file is automatically generated!\n"
			"\n"
			"@echo off\n"
			"\n"
			"set VRAY_PLUGIN_DESC_PATH=${CMAKE_SOURCE_DIR}/deploy/plugins_desc\n"
			"\n"
			"set HOUDINI13_VOLUME_COMPATIBILITY=1\n"
			"set HFS=${HOUDINI_INSTALL_ROOT}\n"
			"set VRAY_SDK=${APPSDK_ROOT}\n"
			"set VRAY_PATH=%VRAY_SDK%/bin\n"
			"set PATH=%HFS%/bin:%VRAY_PATH%:%PATH%\n"
			"set HOUDINI_DSO_ERROR=1\n"
			"\n"
			"\"%HFS%/bin/houdini.exe\" -foreground %*\n"
		)
	else()
		set(HFS_RUN_FILE "$ENV{HOME}/bin/hfs")
		set(HFS_ENV_FILE "$ENV{HOME}/bin/hfs.env")

		message(STATUS "Generating Houdini run file (${HFS_RUN_FILE})")

		file(WRITE ${HFS_ENV_FILE}
			"# NOTE: This file is automatically generated!\n"
			"\n"
			"export HOUDINI13_VOLUME_COMPATIBILITY=1\n"
			"\n"
			"export VRAY_PLUGIN_DESC_PATH=${CMAKE_SOURCE_DIR}/deploy/plugins_desc\n"
			"export VRAY_SDK=\"${APPSDK_ROOT}\"\n"
			"export VRAY_PATH=$VRAY_SDK/bin\n"
			"\n"
		)

		if (APPLE)
			file(APPEND ${HFS_ENV_FILE}
				"export DYLD_LIBRARY_PATH=$VRAY_SDK/bin\n"
				"export HFS=\"${HOUDINI_FRAMEWORK_ROOT}/Resources\"\n"
				"export H=\"$HFS\"\n"
				"export HB=\"$H/bin\"\n"
				"export HDSO=\"$H/../Libraries\"\n"
				"export HD=\"$H/demo\"\n"
				"export HH=\"$H/houdini\"\n"
				"export HHC=\"$HH/config\"\n"
				"export HT=\"$H/toolkit\"\n"
				"export HSB=\"$HH/sbin\"\n"
				"export TEMP=/tmp\n"
				"export JAVA_HOME=/Library/Java/Home\n"
				"export PATH=\"$HB:$HSB:$PATH\"\n"
				"export HOUDINI_MAJOR_RELEASE=14\n"
				"export HOUDINI_MINOR_RELEASE=0\n"
				"export HOUDINI_BUILD_VERSION=${HOUDINI_VERSION_BUILD}\n"
				"export HOUDINI_VERSION=\"$HOUDINI_MAJOR_RELEASE.$HOUDINI_MINOR_RELEASE.$HOUDINI_BUILD_VERSION\"\n"
			)
		else()
			file(APPEND ${HFS_ENV_FILE}
				"export HFS=\"${HOUDINI_INSTALL_ROOT}\"\n"
				"export LD_LIBRARY_PATH=$VRAY_SDK/bin\n"
				"export PATH=$HFS/bin:$VRAY_PATH:$PATH\n"
				"export HOUDINI_DSO_ERROR=1\n"
			)
		endif()

		file(WRITE ${HFS_RUN_FILE}
			"# NOTE: This file is automatically generated!\n"
			"\n"
			"source ${HFS_ENV_FILE}\n"
			"\n"
			"\"${HOUDINI_BIN_PATH}/houdini\" -foreground $*\n"
		)
	endif()
endif()


# Install to local share
#
option(INSTALL_RELEASE "Install release build for distribution" OFF)
if(INSTALL_RELEASE)
	set(INSTALL_RELEASE_PATH "" CACHE PATH "Release install path")

	if(NOT "${CMAKE_BUILD_TYPE}" STREQUAL "Release")
		message(WARNING "INSTALL_RELEASE is ON, but CMAKE_BUILD_TYPE is not \"Release\" (${CMAKE_BUILD_TYPE})!")
	endif()

	if("${INSTALL_RELEASE_PATH}" STREQUAL "")
		message(FATAL_ERROR "INSTALL_RELEASE is ON, but INSTALL_RELEASE_PATH is not set!")
	else()

		# Copy plugin
		cgr_install_runtime(${PROJECT_NAME} ${INSTALL_RELEASE_PATH}/dso)

		# Copy UI & scripts
		install(FILES       ${CMAKE_SOURCE_DIR}/deploy/vfh.shelf
				DESTINATION ${INSTALL_RELEASE_PATH}/deploy)

		install(FILES       ${CMAKE_SOURCE_DIR}/deploy/ROP_vray.svg
				DESTINATION ${INSTALL_RELEASE_PATH}/deploy)

		install(FILES       ${VFH_PY_SCRIPTS}
				DESTINATION ${INSTALL_RELEASE_PATH}/deploy/scripts/vfh)

		# Generate & copy startup file
		if(WIN32)
			configure_file(${CMAKE_SOURCE_DIR}/deploy/hfs.bat.in
						   ${CMAKE_BINARY_DIR}/deploy/hfs.bat
						   @ONLY)

			install(FILES       ${CMAKE_SOURCE_DIR}/deploy/hfs.bat
					DESTINATION ${INSTALL_RELEASE_PATH}
					RENAME      "hfs${HOUDINI_VERSION}.${HOUDINI_VERSION_BUILD}.bat")

		elseif(APPLE)
			configure_file(${CMAKE_SOURCE_DIR}/deploy/hfs_osx.sh.in
						   ${CMAKE_BINARY_DIR}/deploy/hfs_osx.sh
						   @ONLY)

			install(FILES       ${CMAKE_BINARY_DIR}/deploy/hfs_osx.sh
					DESTINATION ${INSTALL_RELEASE_PATH}
					PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ GROUP_EXECUTE WORLD_READ OWNER_EXECUTE GROUP_EXECUTE WORLD_EXECUTE
					RENAME      "hfs${HOUDINI_VERSION}.${HOUDINI_VERSION_BUILD}.sh")

		else()
			configure_file(${CMAKE_SOURCE_DIR}/deploy/hfs_linux.sh.in
						   ${CMAKE_BINARY_DIR}/deploy/hfs_linux.sh
						   @ONLY)

			install(FILES       ${CMAKE_BINARY_DIR}/deploy/hfs_linux.sh
					DESTINATION ${INSTALL_RELEASE_PATH}
					PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ GROUP_EXECUTE WORLD_READ OWNER_EXECUTE GROUP_EXECUTE WORLD_EXECUTE
					RENAME      "hfs${HOUDINI_VERSION}.${HOUDINI_VERSION_BUILD}.sh")
		endif()

		# Copy AppSDK
		file(GLOB APPSDK_BIN         "${APPSDK_ROOT}/bin/*.*")
		file(GLOB APPSDK_VRAYPLUGINS "${APPSDK_ROOT}/bin/plugins/*.*")
		file(GLOB APPSDK_VRLSERVICE  "${APPSDK_ROOT}/bin/vrlservice/*.*")

		file(INSTALL    ${APPSDK_BIN}
			DESTINATION ${INSTALL_RELEASE_PATH}/appsdk/bin
			USE_SOURCE_PERMISSIONS
		)

		file(INSTALL    ${APPSDK_VRAYPLUGINS}
			DESTINATION ${INSTALL_RELEASE_PATH}/appsdk/bin/plugins
			USE_SOURCE_PERMISSIONS
		)

		file(INSTALL    ${APPSDK_VRLSERVICE}
			DESTINATION ${INSTALL_RELEASE_PATH}/appsdk/bin/vrlservice
			USE_SOURCE_PERMISSIONS
		)

		# JSON plugin descriptions
		install(DIRECTORY   ${CMAKE_SOURCE_DIR}/deploy/plugins_desc
				DESTINATION ${INSTALL_RELEASE_PATH}
				PATTERN ".git" EXCLUDE
		)
	endif()
endif()
